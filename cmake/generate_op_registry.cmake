# Auto-generate operator registry from kernel files

if(NOT KERNEL_DIR)
    set(KERNEL_DIR "${CMAKE_CURRENT_SOURCE_DIR}/../op_plugin/ops/kernel")
endif()

if(NOT OUTPUT_FILE)
    set(OUTPUT_FILE "${CMAKE_CURRENT_SOURCE_DIR}/../op_plugin/ops/generated_reg.h")
endif()

message(STATUS "Scanning kernel directory: ${KERNEL_DIR}")
message(STATUS "Output file: ${OUTPUT_FILE}")

# Find all .cc files in kernel directory
file(GLOB_RECURSE KERNEL_FILES "${KERNEL_DIR}/*.cc")

set(OPERATOR_NAMES "")
set(FOUND_COUNT 0)

foreach(KERNEL_FILE ${KERNEL_FILES})
    # Read the file content
    file(READ ${KERNEL_FILE} FILE_CONTENT)

    # Extract operator name using regex: extern "C" int OperatorName(
    string(REGEX MATCH
        "extern[ \t]+\"C\"[ \t]+int[ \t]+([a-zA-Z_][a-zA-Z0-9_]*)[ \t]*\\(" MATCH_RESULT "${FILE_CONTENT}")

    if(CMAKE_MATCH_1)
        list(APPEND OPERATOR_NAMES ${CMAKE_MATCH_1})
        math(EXPR FOUND_COUNT "${FOUND_COUNT} + 1")
        get_filename_component(FILENAME ${KERNEL_FILE} NAME)
        message(STATUS "Found operator: ${CMAKE_MATCH_1} in ${FILENAME}")
    endif()
endforeach()

# Sort the operator names for consistency
list(SORT OPERATOR_NAMES)

message(STATUS "Total operators found: ${FOUND_COUNT}")

# Generate the header file
set(HEADER_CONTENT
    "/**\n * Auto-generated operator registry\n * DO NOT EDIT - Generated by cmake/generate_op_registry.cmake\n */\n\n")
string(APPEND HEADER_CONTENT "#ifndef GENERATED_REG_H\n")
string(APPEND HEADER_CONTENT "#define GENERATED_REG_H\n\n")
string(APPEND HEADER_CONTENT "#include <string>\n")
string(APPEND HEADER_CONTENT "#include <vector>\n\n")
string(APPEND HEADER_CONTENT "const std::vector<std::string> register_op_name = {\n")

# Add each operator name as a quoted string
set(FIRST_ITEM TRUE)
foreach(OP_NAME ${OPERATOR_NAMES})
    if(NOT FIRST_ITEM)
        string(APPEND HEADER_CONTENT ",\n")
    endif()
    string(APPEND HEADER_CONTENT "  \"${OP_NAME}\"")
    set(FIRST_ITEM FALSE)
endforeach()

string(APPEND HEADER_CONTENT "\n};\n\n")
string(APPEND HEADER_CONTENT "#endif // GENERATED_REG_H\n")

# Write the generated content to file
# Only write if OUTPUT_FILE does not exist or content has changed
if(EXISTS ${OUTPUT_FILE})
    # Write HEADER_CONTENT to a temporary file
    set(TMP_FILE "${OUTPUT_FILE}.tmp")
    file(WRITE ${TMP_FILE} "${HEADER_CONTENT}")

    # Compute md5sums
    file(MD5 ${OUTPUT_FILE} OLD_MD5)
    file(MD5 ${TMP_FILE} NEW_MD5)

    if(OLD_MD5 STREQUAL NEW_MD5)
        file(REMOVE ${TMP_FILE})
    else()
        file(RENAME ${TMP_FILE} ${OUTPUT_FILE})
        message(STATUS "Updated ${OUTPUT_FILE} (content changed).")
    endif()
else()
    file(WRITE ${OUTPUT_FILE} "${HEADER_CONTENT}")
endif()

message(STATUS "Generated ${OUTPUT_FILE} with ${FOUND_COUNT} operators")